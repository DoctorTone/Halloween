/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import type { JSX } from "react";
import { useGLTF, Float } from "@react-three/drei";
import type { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Object_6: THREE.Mesh;
    Object_4: THREE.Mesh;
  };
  materials: {
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
};

export function Ghost(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "./models/ghost2.glb"
  ) as unknown as GLTFResult;
  return (
    <Float>
      <group {...props} dispose={null}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          position={[0, 5.818, 0]}
          rotation={[-Math.PI, 1.218, -Math.PI]}
          scale={1.438}
        >
          <meshBasicMaterial color={"red"} side={THREE.BackSide} />
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          position={[0, 5.818, 0]}
          rotation={[-Math.PI, 1.218, -Math.PI]}
          scale={1.438}
        >
          <meshStandardMaterial
            color="#ffffff"
            transparent
            opacity={0.6}
            emissive="#99aaff"
            emissiveIntensity={0}
          />
        </mesh>
      </group>
    </Float>
  );
}

useGLTF.preload("./models/ghost2.glb");
